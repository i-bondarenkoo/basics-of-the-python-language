class LibraryDB:
    
    def __init__(self):
        # Инициализация базы данных: список книг, каждая книга представлена словарём с полями title, author и year
        self.books = [
            {"title": "Мастер и Маргарита", "author": "Михаил Булгаков", "year": "1925"},
            {"title": "1984", "author": "Джордж Оруэлл", "year": "1949"},
            {"title": "Война и мир", "author": "Лев Толстой", "year": "1869"},
            {"title": "Преступление и наказание", "author": "Фёдор Достоевский", "year": "1866"},
            {"title": "Герой нашего времени", "author": "Михаил Лермонтов", "year": "1840"},
            {"title": "Унесённые ветром", "author": "Маргарет Митчелл", "year": "1936"},
            {"title": "Великий Гэтсби", "author": "Фрэнсис Скотт Фицджеральд", "year": "1925"},
            {"title": "Анна Каренина", "author": "Лев Толстой", "year": "1878"},
            {"title": "Гордость и предубеждение", "author": "Джейн Остин", "year": "1813"},
            {"title": "Дон Кихот", "author": "Мигель де Сервантес", "year": "1605"}
        ]
        
    # Метод для поиска книг по названию или автору
    def search_books(self, text):
        result = []  # Инициализируем пустой список для хранения найденных книг
        for book in self.books:  # Перебираем все книги в базе данных
            # Проверяем, содержится ли текст поиска в названии или авторе книги (без учёта регистра)
            if text.lower() in book["title"].lower() or text.lower() in book["author"].lower():
                result.append(book)  # Если совпадение найдено, добавляем книгу в результат
        if result:  # Если есть найденные книги
            return result  # Возвращаем список найденных книг
        else:  # Если совпадений нет
            return 'Такой книги нет в списке'  # Возвращаем сообщение о том, что книга не найдена
    
    # Метод для добавления новой книги
    def add_book(self):
        # Запрашиваем у пользователя данные о книге
        title = input("Введите название книги: ")
        author = input("Введите автора книги: ")
        year = input("Введите год выпуска книги: ")
        
        # Добавляем новую книгу в список books
        self.books.append({
            "title": title,
            "author": author,
            "year": year
        })
        
        return "Книга успешно добавлена!"  # Возвращаем сообщение о добавлении книги
    
    # Метод для удаления книги по текстовому запросу
    def delete_book(self, text):
        deleted = False  # Флаг для отслеживания, была ли удалена хотя бы одна книга
        # Используем цикл по копии списка, чтобы безопасно удалять элементы из оригинального списка
        for book in self.books[:]:
            # Проверяем, содержится ли текст запроса в одном из полей книги
            if text.lower() in book["title"].lower() or text.lower() in book["author"].lower() or text.lower() in book["year"]:
                self.books.remove(book)  # Удаляем книгу из списка
                deleted = True  # Устанавливаем флаг в True, так как книга была удалена
        
        # Возвращаем сообщение в зависимости от результата удаления
        if deleted:
            return "Книга успешно удалена!"
        else:
            return "Такой книги нет в списке"

# Создаём объект базы данных
db = LibraryDB()

# Примеры использования методов класса
print(db.search_books("Лев Толстой"))  # Поиск книг по автору
print(db.add_book())  # Добавление новой книги
print(db.delete_book("Толстой"))  # Удаление книги по автору
